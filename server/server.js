// server/server.js (Final Version for Both Dev & Production)

import dotenv from "dotenv";
import express from "express";
import admin from "firebase-admin";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

import { connectToDatabase } from "./config/connection.js";
import routes from "./routes/index.js";

dotenv.config();

// --- NEW UNIVERSAL INITIALIZATION ---
// This code now works perfectly for BOTH local dev and production on Render
const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const app = express();
const PORT = process.env.PORT || 3001;

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// In production, the frontend is a separate service.
// In development, you might want this for testing a full build locally.
// (Though with your concurrently script, you might not even need this block at all)
if (process.env.NODE_ENV === "production") {
  // This path assumes your folder structure is monorepo/client and monorepo/server
  // It points to the 'dist' folder generated by Vite's `npm run build` in the client directory
  const clientBuildPath = path.resolve(
    path.dirname(fileURLToPath(import.meta.url)),
    "..",
    "client",
    "dist"
  );
  app.use(express.static(clientBuildPath));

  // For any route not handled by the API, send the index.html from the client build
  app.get("*", (req, res) => {
    res.sendFile(path.resolve(clientBuildPath, "index.html"));
  });
}

app.use(routes); // This is your main router from routes/index.js

connectToDatabase()
  .then(() => {
    app.listen(PORT, () => {
      console.log(
        `Dragon Focus API Server listening on http://localhost:${PORT}`
      );
    });
  })
  .catch((err) => {
    console.log(`Failed to connect to database. Err: ${err}`);
  });

// Add a simple listener so the server has something to do
// app.listen(PORT, () => {
//   console.log(
//     `DEBUG MODE: Server listening on port ${PORT} WITHOUT database connection.`
//   );
// });
